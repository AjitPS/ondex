/* Webservice wrapper of the Parserplugins.
*
*/
//WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

package net.sourceforge.ondex.server.plugins.parser;

import net.sourceforge.ondex.ONDEXPluginArguments;
import net.sourceforge.ondex.core.ONDEXGraph;
import net.sourceforge.ondex.wsapi.exceptions.*;
import net.sourceforge.ondex.wsapi.plugins.ZipFormat;
import org.apache.log4j.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import java.io.File;
import java.io.StringWriter;
import net.sourceforge.ondex.server.plugins.Base;
import net.sourceforge.ondex.wsapi.exceptions.WebserviceException;



/**
* AutoGenerated
* @author Christian Brenninkmeijer
*/
public class ParserAuto extends Base{ 

    private static final Logger logger = Logger.getLogger(ParserAuto.class);

    public ParserAuto() throws CaughtException{
        super();
    }

     /**
     * Method to run Parser in FASTA package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko)
 	 *    Authors: Matthew Hindle, Berend Hoekman, 
 	 *    Custodians: Keywan Hassani-pak, 
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) Absolute path to input file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of Absolute path to input file
     * @param FastaFileType
 	 *            (Optional. Defaults to :simple) This setting must be used in order to parse the fasta header in a sensible way.
If your file type is not in this list, please try "simple" as this parser is the most generic
     * @param TaxId
 	 *            (Optional. No Default.) This setting must be used in order to parse the fasta header in a sensible way.
If your file type is not in this list, please try "simple" as this parser is the most generic
     * @param CC
 	 *            (Optional. No Default.) The type of the sequences (e.g. target, gene, protein)
     * @param DataSource
 	 *            (Optional. Defaults to :unknown) The source of the sequences (e.g. AFFY, TAIR, dbEST, unknown)
     * @param POS_TO_ACCESSION
 	 *            (Optional. No Default.) [List]
     * @param SeqType
 	 *            (Optional. Defaults to :AA) The type (attribute name) of the sequences (e.g. NA, AA)
     * @param Separator
 	 *            (Optional. No Default.) RegEx to split header in simple FASTA parser.
     * @param AccessionRegEx
 	 *            (Optional. No Default.) RegEx to be used as an additional accession.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String FASTAParser(
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "FastaFileType")java.lang.String FastaFileType,
           @WebParam(name = "TaxId")java.lang.String TaxId,
           @WebParam(name = "CC")java.lang.String CC,
           @WebParam(name = "DataSource")java.lang.String DataSource,
           @WebParam(name = "POS_TO_ACCESSION")java.lang.String[] POS_TO_ACCESSION,
           @WebParam(name = "SeqType")java.lang.String SeqType,
           @WebParam(name = "Separator")java.lang.String Separator,
           @WebParam(name = "AccessionRegEx")java.lang.String AccessionRegEx,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser FASTA called");
           net.sourceforge.ondex.parser.fasta.Parser parser =
                   new net.sourceforge.ondex.parser.fasta.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           createArguement(parser, arguments, "FastaFileType", FastaFileType);
           createArguement(parser, arguments, "TaxId", TaxId);
           createArguement(parser, arguments, "CC", CC);
           createArguement(parser, arguments, "DataSource", DataSource);
           createArguement(parser, arguments, "POS_TO_ACCESSION", POS_TO_ACCESSION);
           createArguement(parser, arguments, "SeqType", SeqType);
           createArguement(parser, arguments, "Separator", Separator);
           createArguement(parser, arguments, "AccessionRegEx", AccessionRegEx);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser affymetrix
//Ignoring plugin without status parser ahd
//Ignoring experimental plugin parser arabidopsis_hormone_db
     /**
     * Method to run Parser in aracyc package.
     *
 	 *    Status: STABLE Tested on Aracyc Release 6, Febuary 2010 (hindlem et al.)
 	 *    DatabaseTarget: AraCyc http://www.genome.jp/kegg The AraCyc database [Ljava.lang.String;@bde56d
 	 *    DataURL: AraCyc databases URL on application to AraCyc all files in data folder with no directory structure [Ljava.lang.String;@121784f
     * @param InputDirString
 	 *            (REQUIRED!) (If InputDirByteArray is used the this will only serve to determine compression type.) Absolute path to input directory
     *        Legal values for the String are:
     *        1) Path and Name of a Directory Stored on the Server. 
     *        2) Path and Name of a *.zip, *.tar, or *.tar.gz File Stored on the Server. 
     *        3) Valid URL pointing to a *.zip, *.tar or  *.tar.gz file. (Traverna New Value) 
     *        4) FTP address which can be a directory or a single *.zip, *.tar or  *.tar.gz file. (Traverna New Value)
     *        5) Format of the ByteArray "zip", "tar" or  "tar.gz". Using any other value which does not end in these literals will cause an Exception if ByteArray is not null or empty.
     * @param InputDirByteArray
 	 *            (REQUIRED!) Expects InputDirString to describe format. Options are "zip" and "tar.gz".Absolute path to input directory
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String aracycParser(
           @WebParam(name = "InputDirString") String InputDirString,
           @WebParam(name = "InputDirByteArray") byte[] InputDirByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser aracyc called");
           net.sourceforge.ondex.parser.aracyc.Parser parser =
                   new net.sourceforge.ondex.parser.aracyc.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputDirectoryArguement(parser, arguments, "InputDir", InputDirString, InputDirByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser atregnet
//Ignoring plugin without status parser atregnet2
//Ignoring plugin without status parser barrescelltype
     /**
     * Method to run Parser in bcsdb package.
     *
 	 *    DatabaseTarget: BCSDB http://www.glyco.ac.ru/bcsdb3 Bacterial Carbohydrate Structure DataBase [Ljava.lang.String;@61c596
 	 *    Custodians: Victor Lesk, 
 	 *    Status: STABLE declared on 28/07/2010
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) Absolute path to input file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of Absolute path to input file
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String bcsdbParser(
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser bcsdb called");
           net.sourceforge.ondex.parser.bcsdb.Parser parser =
                   new net.sourceforge.ondex.parser.bcsdb.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring experimental plugin parser biocyc
//Ignoring plugin without status parser biocycold
//Ignoring plugin without status parser biogrid
//Ignoring experimental plugin parser brenda
     /**
     * Method to run Parser in brendasbml package.
     *
 	 *    DatabaseTarget: BRENDA http://www.brenda-enzymes.info/ Brenda enzymatics database [Ljava.lang.String;@13f79f7
 	 *    Custodians: Jan Taubert, 
 	 *    Status: STABLE tested on 28/07/2010
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) Absolute path to input file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of Absolute path to input file
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String brendasbmlParser(
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser brendasbml called");
           net.sourceforge.ondex.parser.brendasbml.Parser parser =
                   new net.sourceforge.ondex.parser.brendasbml.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser business
//Ignoring plugin without status parser carbbank
//Ignoring plugin without status parser correlationtab
//Ignoring plugin without status parser customtab
//Ignoring plugin without status parser cytoscape
//Ignoring plugin without status parser drastic
     /**
     * Method to run Parser in ec package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko)
 	 *    DatabaseTarget: EXPASY ENZYME http://www.expasy.ch/ EXPASY ENZYME database [Ljava.lang.String;@6076f4
 	 *    DataURL: enzclass and enzyme files enzclass and enzyme, all txt and dat files in directory files [Ljava.lang.String;@121c7d6
AttributeNameRequired: EC, PROSITE, UNIPROTKB, 
ConceptClassRequired: EC, Protein, ProtDomain, 
EvidenceTypeRequired: IMPD, 
RelationTypeRequired: cat_c, is_a, 
AttributeNameRequired: TAXID, 
     * @param Deleted
 	 *            (Optional. Defaults to :false) This specifies whether the enzymes with a deleted flag will be parsed from the EC database.
     * @param InputDirString
 	 *            (REQUIRED!) (If InputDirByteArray is used the this will only serve to determine compression type.) Absolute path to input directory
     *        Legal values for the String are:
     *        1) Path and Name of a Directory Stored on the Server. 
     *        2) Path and Name of a *.zip, *.tar, or *.tar.gz File Stored on the Server. 
     *        3) Valid URL pointing to a *.zip, *.tar or  *.tar.gz file. (Traverna New Value) 
     *        4) FTP address which can be a directory or a single *.zip, *.tar or  *.tar.gz file. (Traverna New Value)
     *        5) Format of the ByteArray "zip", "tar" or  "tar.gz". Using any other value which does not end in these literals will cause an Exception if ByteArray is not null or empty.
     * @param InputDirByteArray
 	 *            (REQUIRED!) Expects InputDirString to describe format. Options are "zip" and "tar.gz".Absolute path to input directory
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String ecParser(
           @WebParam(name = "Deleted")java.lang.Boolean Deleted,
           @WebParam(name = "InputDirString") String InputDirString,
           @WebParam(name = "InputDirByteArray") byte[] InputDirByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser ec called");
           net.sourceforge.ondex.parser.ec.Parser parser =
                   new net.sourceforge.ondex.parser.ec.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createArguement(parser, arguments, "Deleted", Deleted);
           createInputDirectoryArguement(parser, arguments, "InputDir", InputDirString, InputDirByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser ecocyc
//Ignoring plugin without status parser eqtl
//Ignoring plugin without status parser fourdim
//Ignoring plugin without status parser fulltext
     /**
     * Method to run Parser in gaf package.
     *
 	 *    Status: STABLE Parser for the Gene Association Format (GAF). Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Keywan Hassani-Pak, 
 	 *    DatabaseTarget: GOA http://geneontology.org/GO.format.annotation.shtml Gene Association Files (GAF) [Ljava.lang.String;@c6c084
 	 *    DataURL: GAF files Any GAF file, e.g gene annotations to GO, PO or TO. [Ljava.lang.String;@893e69
 	 *    Custodians: Keywan Hassani-pak, 
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) Absolute path to input file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of Absolute path to input file
     * @param TranslationFileString
 	 *            (Optional.) (Use this or TranslationFileByteArray NOT BOTH.) Tab delimitted file for mapping between GAF ObjectTypes and Ondex ConceptClasses
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param TranslationFileByteArray
 	 *            (Optional.) (Only used if TranslationFileString is null or "".) GZip representation of Tab delimitted file for mapping between GAF ObjectTypes and Ondex ConceptClasses
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String gafParser(
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "TranslationFileString") String TranslationFileString,
           @WebParam(name = "TranslationFileByteArray") byte[] TranslationFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser gaf called");
           net.sourceforge.ondex.parser.gaf.Parser parser =
                   new net.sourceforge.ondex.parser.gaf.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           createOptionalInputFileArguement(parser, arguments, "TranslationFile", TranslationFileString, TranslationFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser genego
     /**
     * Method to run Parser in genericobo package.
     *
 	 *    Status: STABLE Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Berend Hoekmann, Keywan Hassani-Pak, 
 	 *    DatabaseTarget: GenericOBO http://www.obofoundry.org/ A parser for the OBO format. Currently it understands GO, PO, TO, CHEBI dialects. [Ljava.lang.String;@607135
 	 *    DataURL: OBO It works with Plant Ontology, Ttrait Ontology, Gene Ontology and CHEBI [Ljava.lang.String;@1a88001
 	 *    Custodians: Keywan Hassani-pak, 
     * @param OboType
 	 *            (Optional. Defaults to :PO) Use this to specify the origin of the obo file which you are about to parse (e.g "GO", "PO", "CHEBI", "TO")
     * @param Obsoletes
 	 *            (Optional. Defaults to :false) This specifies if OBO-concepts with the obsolete flag will be parsed.
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) Absolute path to input file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of Absolute path to input file
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String genericoboParser(
           @WebParam(name = "OboType")java.lang.String OboType,
           @WebParam(name = "Obsoletes")java.lang.Boolean Obsoletes,
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser genericobo called");
           net.sourceforge.ondex.parser.genericobo.Parser parser =
                   new net.sourceforge.ondex.parser.genericobo.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createArguement(parser, arguments, "OboType", OboType);
           createArguement(parser, arguments, "Obsoletes", Obsoletes);
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser generif
//Ignoring plugin without status parser glyco
//Ignoring plugin without status parser glycomedb
     /**
     * Method to run Parser in go package.
     *
 	 *    Status: STABLE GO OBO Parser. Works with the filtered ontology; cross-products, inter-ontology links, and has_part relationships removed. Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Keywan Hassani-Pak, 
 	 *    DatabaseTarget: GO http://www.geneontology.org/ A parser for the Gene Ontology. [Ljava.lang.String;@16bf0aa
 	 *    DataURL: GO GO Filtered ontology; cross-products, inter-ontology links, and has_part relationships removed [Ljava.lang.String;@18532dc
 	 *    Custodians: Keywan Hassani-pak, 
     * @param Obsoletes
 	 *            (Optional. Defaults to :false) This specifies if OBO-concepts with the obsolete flag will be parsed.
     * @param IsGOSLIM
 	 *            (Optional. Defaults to :false) Parse GO in as GOSLIM
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) Absolute path to input file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of Absolute path to input file
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String goParser(
           @WebParam(name = "Obsoletes")java.lang.Boolean Obsoletes,
           @WebParam(name = "IsGOSLIM")java.lang.Boolean IsGOSLIM,
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser go called");
           net.sourceforge.ondex.parser.go.Parser parser =
                   new net.sourceforge.ondex.parser.go.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createArguement(parser, arguments, "Obsoletes", Obsoletes);
           createArguement(parser, arguments, "IsGOSLIM", IsGOSLIM);
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser goa2
//Ignoring plugin without status parser gramene
//Ignoring plugin without status parser grassius
//Ignoring plugin without status parser habitat
//Ignoring plugin without status parser helloworld
//Ignoring plugin without status parser iah
//Ignoring experimental plugin parser interpro
     /**
     * Method to run Parser in kegg52 package.
     *
 	 *    Status: STABLE To be fully tested for March 10 Release
 	 *    DatabaseTarget: KEGG http://www.genome.jp/kegg The KEGG database [Ljava.lang.String;@1ce1387
 	 *    DataURL: KEGG genes, ligand, pathway, and brite databases  [Ljava.lang.String;@640b25
 	 *    Authors: Matthew Hindle, Jan Taubert, 
 	 *    Custodians: Shaochih Kuo, 
     * @param InputDirString
 	 *            (REQUIRED!) (If InputDirByteArray is used the this will only serve to determine compression type.) Absolute path to input directory
     *        Legal values for the String are:
     *        1) Path and Name of a Directory Stored on the Server. 
     *        2) Path and Name of a *.zip, *.tar, or *.tar.gz File Stored on the Server. 
     *        3) Valid URL pointing to a *.zip, *.tar or  *.tar.gz file. (Traverna New Value) 
     *        4) FTP address which can be a directory or a single *.zip, *.tar or  *.tar.gz file. (Traverna New Value)
     *        5) Format of the ByteArray "zip", "tar" or  "tar.gz". Using any other value which does not end in these literals will cause an Exception if ByteArray is not null or empty.
     * @param InputDirByteArray
 	 *            (REQUIRED!) Expects InputDirString to describe format. Options are "zip" and "tar.gz".Absolute path to input directory
     * @param Species
 	 *            (Optional. Defaults to :all) [List]Use this parameter to specify the species to be loaded from the kegg database.
     * @param ParseSequences
 	 *            (Optional. Defaults to :false) KEGG species code
     * @param ImportOrthologFillers
 	 *            (Optional. Defaults to :false) Import Ortholog Pathway Fillers
     * @param OnlyReferenced
 	 *            (Optional. Defaults to :true) Import only pathway entries which are referenced in relation or reaction section.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String kegg52Parser(
           @WebParam(name = "InputDirString") String InputDirString,
           @WebParam(name = "InputDirByteArray") byte[] InputDirByteArray,
           @WebParam(name = "Species")java.lang.String[] Species,
           @WebParam(name = "ParseSequences")java.lang.Boolean ParseSequences,
           @WebParam(name = "ImportOrthologFillers")java.lang.Boolean ImportOrthologFillers,
           @WebParam(name = "OnlyReferenced")java.lang.Boolean OnlyReferenced,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser kegg52 called");
           net.sourceforge.ondex.parser.kegg52.Parser parser =
                   new net.sourceforge.ondex.parser.kegg52.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputDirectoryArguement(parser, arguments, "InputDir", InputDirString, InputDirByteArray);
           createArguement(parser, arguments, "Species", Species);
           createArguement(parser, arguments, "ParseSequences", ParseSequences);
           createArguement(parser, arguments, "ImportOrthologFillers", ImportOrthologFillers);
           createArguement(parser, arguments, "OnlyReferenced", OnlyReferenced);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

     /**
     * Method to run Parser in kegg53 package.
     *
 	 *    Status: STABLE Tested March 2010 (hindlem et al.)
 	 *    DatabaseTarget: KEGG http://www.genome.jp/kegg The KEGG database [Ljava.lang.String;@17d56b
 	 *    DataURL: KEGG databases KEGG genes, ligand, pathway, and brite databases. keggHierarchy file is optional and adds a shallow hierarchy of super pathways. [Ljava.lang.String;@bc9f58
 	 *    Authors: Matthew Hindle, Jan Taubert, 
 	 *    Custodians: Shaochih Kuo, 
     * @param InputDirString
 	 *            (REQUIRED!) (If InputDirByteArray is used the this will only serve to determine compression type.) Absolute path to input directory
     *        Legal values for the String are:
     *        1) Path and Name of a Directory Stored on the Server. 
     *        2) Path and Name of a *.zip, *.tar, or *.tar.gz File Stored on the Server. 
     *        3) Valid URL pointing to a *.zip, *.tar or  *.tar.gz file. (Traverna New Value) 
     *        4) FTP address which can be a directory or a single *.zip, *.tar or  *.tar.gz file. (Traverna New Value)
     *        5) Format of the ByteArray "zip", "tar" or  "tar.gz". Using any other value which does not end in these literals will cause an Exception if ByteArray is not null or empty.
     * @param InputDirByteArray
 	 *            (REQUIRED!) Expects InputDirString to describe format. Options are "zip" and "tar.gz".Absolute path to input directory
     * @param Species
 	 *            (REQUIRED! No Default!) [List]KEGG species code or NCBI taxid; specifies species to parse pathways for
     * @param ParseAllSequencesForSpecies
 	 *            (Optional. Defaults to :false) Specifies to parse all genes for a species regardless of membership of pathway
     * @param SpeciesOrthologs
 	 *            (Optional. No Default.) [List]Parse othologs to specified species
     * @param OnlyReferenced
 	 *            (Optional. Defaults to :true) Import only pathway entries which are referenced in relation or reaction section.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String kegg53Parser(
           @WebParam(name = "InputDirString") String InputDirString,
           @WebParam(name = "InputDirByteArray") byte[] InputDirByteArray,
           @WebParam(name = "Species")java.lang.String[] Species,
           @WebParam(name = "ParseAllSequencesForSpecies")java.lang.Boolean ParseAllSequencesForSpecies,
           @WebParam(name = "SpeciesOrthologs")java.lang.String[] SpeciesOrthologs,
           @WebParam(name = "OnlyReferenced")java.lang.Boolean OnlyReferenced,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser kegg53 called");
           net.sourceforge.ondex.parser.kegg53.Parser parser =
                   new net.sourceforge.ondex.parser.kegg53.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputDirectoryArguement(parser, arguments, "InputDir", InputDirString, InputDirByteArray);
           createArguement(parser, arguments, "Species", Species);
           createArguement(parser, arguments, "ParseAllSequencesForSpecies", ParseAllSequencesForSpecies);
           createArguement(parser, arguments, "SpeciesOrthologs", SpeciesOrthologs);
           createArguement(parser, arguments, "OnlyReferenced", OnlyReferenced);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

     /**
     * Method to run Parser in kegg56 package.
     *
 	 *    Status: STABLE Tested November 2010 (taubertj et al.)
 	 *    DatabaseTarget: KEGG http://www.genome.jp/kegg The KEGG database [Ljava.lang.String;@1816fb6
 	 *    DataURL: KEGG databases KEGG genes, ligand, pathway, and brite databases. keggHierarchy file is optional and adds a shallow hierarchy of super pathways. [Ljava.lang.String;@cd429b
 	 *    Authors: Matthew Hindle, Jan Taubert, 
 	 *    Custodians: Shaochih Kuo, 
     * @param InputDirString
 	 *            (REQUIRED!) (If InputDirByteArray is used the this will only serve to determine compression type.) Absolute path to input directory
     *        Legal values for the String are:
     *        1) Path and Name of a Directory Stored on the Server. 
     *        2) Path and Name of a *.zip, *.tar, or *.tar.gz File Stored on the Server. 
     *        3) Valid URL pointing to a *.zip, *.tar or  *.tar.gz file. (Traverna New Value) 
     *        4) FTP address which can be a directory or a single *.zip, *.tar or  *.tar.gz file. (Traverna New Value)
     *        5) Format of the ByteArray "zip", "tar" or  "tar.gz". Using any other value which does not end in these literals will cause an Exception if ByteArray is not null or empty.
     * @param InputDirByteArray
 	 *            (REQUIRED!) Expects InputDirString to describe format. Options are "zip" and "tar.gz".Absolute path to input directory
     * @param Species
 	 *            (REQUIRED! No Default!) [List]KEGG species code or NCBI taxid; specifies species to parse pathways for
     * @param ParseAllSequencesForSpecies
 	 *            (Optional. Defaults to :false) Specifies to parse all genes for a species regardless of membership of pathway
     * @param SpeciesOrthologs
 	 *            (Optional. No Default.) [List]Parse othologs to specified species
     * @param OnlyReferenced
 	 *            (Optional. Defaults to :true) Import only pathway entries which are referenced in relation or reaction section.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String kegg56Parser(
           @WebParam(name = "InputDirString") String InputDirString,
           @WebParam(name = "InputDirByteArray") byte[] InputDirByteArray,
           @WebParam(name = "Species")java.lang.String[] Species,
           @WebParam(name = "ParseAllSequencesForSpecies")java.lang.Boolean ParseAllSequencesForSpecies,
           @WebParam(name = "SpeciesOrthologs")java.lang.String[] SpeciesOrthologs,
           @WebParam(name = "OnlyReferenced")java.lang.Boolean OnlyReferenced,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser kegg56 called");
           net.sourceforge.ondex.parser.kegg56.Parser parser =
                   new net.sourceforge.ondex.parser.kegg56.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputDirectoryArguement(parser, arguments, "InputDir", InputDirString, InputDirByteArray);
           createArguement(parser, arguments, "Species", Species);
           createArguement(parser, arguments, "ParseAllSequencesForSpecies", ParseAllSequencesForSpecies);
           createArguement(parser, arguments, "SpeciesOrthologs", SpeciesOrthologs);
           createArguement(parser, arguments, "OnlyReferenced", OnlyReferenced);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser keggapi
//Ignoring experimental plugin parser keggmap
//Ignoring plugin without status parser madisease
//Ignoring plugin without status parser matrix
     /**
     * Method to run Parser in medline package.
     *
 	 *    Status: STABLE Parses PubMed/Medline XML files or uses EFetch web-service to load publications into Ondex. Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Keywan Hassani-Pak, 
 	 *    DatabaseTarget: MEDLINE http://www.ncbi.nlm.nih.gov/pubmed/ Biomedical Literature [Ljava.lang.String;@4947d3
 	 *    DataURL: MEDLINE XML Any MEDLINE XML file. Use either PubMed to search for keywords and save results to XML or use Parser's integrated web-service functionality to fetch cited publications online. [Ljava.lang.String;@10a94c5
 	 *    Custodians: Keywan Hassani-pak, 
     * @param InputFileString
 	 *            (Optional.) (Use this or InputFileByteArray NOT BOTH.) Input file in PubMed/MEDLINE XML format.
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (Optional.) (Only used if InputFileString is null or "".) GZip representation of Input file in PubMed/MEDLINE XML format.
     * @param ImportCitedPMIDs
 	 *            (Optional. Defaults to :false) Import publications that are cited in the Ondex graph. Efetch web-service will be used to retrieve all information and new publication concepts will be created.
     * @param PubMedIdsFileString
 	 *            (Optional.) (Use this or PubMedIdsFileByteArray NOT BOTH.) File which contains PubMed IDs to be parsed into Ondex (separated by line break). Efetch web-service will be used to retrieve and create publication concepts.
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param PubMedIdsFileByteArray
 	 *            (Optional.) (Only used if PubMedIdsFileString is null or "".) GZip representation of File which contains PubMed IDs to be parsed into Ondex (separated by line break). Efetch web-service will be used to retrieve and create publication concepts.
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String medlineParser(
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "ImportCitedPMIDs")java.lang.Boolean ImportCitedPMIDs,
           @WebParam(name = "PubMedIdsFileString") String PubMedIdsFileString,
           @WebParam(name = "PubMedIdsFileByteArray") byte[] PubMedIdsFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser medline called");
           net.sourceforge.ondex.parser.medline2.Parser parser =
                   new net.sourceforge.ondex.parser.medline2.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createOptionalInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           createArguement(parser, arguments, "ImportCitedPMIDs", ImportCitedPMIDs);
           createOptionalInputFileArguement(parser, arguments, "PubMedIdsFile", PubMedIdsFileString, PubMedIdsFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring experimental plugin parser medline_obs
//Ignoring plugin without status parser metacyc
//Ignoring plugin without status parser n3
//Ignoring plugin without status parser oglycbase
//Ignoring plugin without status parser omim
//Ignoring experimental plugin parser orthoxml
     /**
     * Method to run Parser in oxl package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko)
 	 *    Authors: Matthew Pocock, Jan Taubert, K Sieren, 
 	 *    Custodians: Jan Taubert, 
     * @param IgnoreAttribute
 	 *            (Optional. No Default.) [List]Do not parse Attribute attributes with specified AttributeName
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) OXL file to load
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of OXL file to load
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String oxlParser(
           @WebParam(name = "IgnoreAttribute")java.lang.String[] IgnoreAttribute,
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser oxl called");
           net.sourceforge.ondex.parser.oxl.Parser parser =
                   new net.sourceforge.ondex.parser.oxl.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createArguement(parser, arguments, "IgnoreAttribute", IgnoreAttribute);
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser pdb
//Ignoring plugin without status parser pfam
//Ignoring experimental plugin parser phytozome
//Ignoring plugin without status parser plntfdb
//Ignoring plugin without status parser poplar
//Ignoring plugin without status parser poplar_chip
//Ignoring plugin without status parser poplarqtl
//Ignoring plugin without status parser prolog
//Ignoring plugin without status parser psimi
//Ignoring plugin without status parser sbml
//Ignoring plugin without status parser sbml2
//Ignoring plugin without status parser sbml2a
//Ignoring plugin without status parser tab
//Ignoring plugin without status parser tableparser
//Ignoring experimental plugin parser tair
//Ignoring plugin without status parser taxonomy
//Ignoring plugin without status parser tf2
//Ignoring plugin without status parser tigrricefasta
//Ignoring experimental plugin parser transfac
//Ignoring experimental plugin parser transpath
     /**
     * Method to run Parser in uniprot package.
     *
 	 *    Status: STABLE Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Robert Pesch, Keywan Hassani-Pak, Matthew Hindle, 
 	 *    DatabaseTarget: UniProt http://www.uniprot.org A comprehensive, high-quality and freely accessible resource of protein sequence and functional information. [Ljava.lang.String;@195ddba
 	 *    DataURL: UniProt XML Any UniProt (Swiss-Prot or TrEMBL) XML file, avoid parsing everything if possible, select your species in UniProt and download a subset. [Ljava.lang.String;@fe861
 	 *    Custodians: Keywan Hassani-pak, 
     * @param InputFileString
 	 *            (REQUIRED!) (Use this or InputFileByteArray NOT BOTH.) UniProt XML file
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param InputFileByteArray
 	 *            (REQUIRED!) (Only used if InputFileString is null or "".) GZip representation of UniProt XML file
     * @param TaxId
 	 *            (Optional. No Default.) [List]Only parse proteins with exactly this taxonomy id
     * @param GoFileString
 	 *            (Optional.) (Use this or GoFileByteArray NOT BOTH.) GO OBO file. This will link proteins with proper GO concepts of ConcepClass MolFunc, BioProc and CelComp. If not specified GO accessions are part of proteins.
     *        Legal values for the String are:
     *        1) Path and Name of a File Stored on the Server.
     *        2) Valid URL pointing to the file. (Traverna New Value)
     *        3) Valid URL pointing to a gzip file (as identified by ".gz" ending. 
     *                 (Traverna New Value)
     *        4) Actaul String value. Avoid using this option if data is in a URL (use 3). 
     *                 (Traverna Add file location or Add URL)
     * @param GoFileByteArray
 	 *            (Optional.) (Only used if GoFileString is null or "".) GZip representation of GO OBO file. This will link proteins with proper GO concepts of ConcepClass MolFunc, BioProc and CelComp. If not specified GO accessions are part of proteins.
     * @param DbRefAcc
 	 *            (Optional. Defaults to :false) True, false. Load accessions used in existing Ondex graph
     * @param Accessions
 	 *            (Optional. No Default.) A list of comma separated accession numbers (any acc, does not need to be uniprot acc), which should be parsed from the given uniprot file
     * @param AccessionsFile
 	 *            (Optional. No Default.) Path to the file containing a list of accession numbers (one acc per every line), which should be parsed from the given uniprot file
     * @param Tag_Information
 	 *            (Optional. Defaults to :true) True,false. defines if tag information should be attachted to the concepts
     * @param HideLargeScaleRef
 	 *            (Optional. Defaults to :true) True,false. Hide large scale references (publications).
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return String representation of all event fired by the parser
     * @throws WebserviceException
     */
    @WebResult(name = "info")

    @WebMethod(exclude = false)
    public String uniprotParser(
           @WebParam(name = "InputFileString") String InputFileString,
           @WebParam(name = "InputFileByteArray") byte[] InputFileByteArray,
           @WebParam(name = "TaxId")java.lang.String[] TaxId,
           @WebParam(name = "GoFileString") String GoFileString,
           @WebParam(name = "GoFileByteArray") byte[] GoFileByteArray,
           @WebParam(name = "DbRefAcc")java.lang.Boolean DbRefAcc,
           @WebParam(name = "Accessions")java.lang.String Accessions,
           @WebParam(name = "AccessionsFile")java.lang.String AccessionsFile,
           @WebParam(name = "Tag_Information")java.lang.Boolean Tag_Information,
           @WebParam(name = "HideLargeScaleRef")java.lang.Boolean HideLargeScaleRef,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("parser uniprot called");
           net.sourceforge.ondex.parser.uniprot.Parser parser =
                   new net.sourceforge.ondex.parser.uniprot.Parser();
           logger.info(");Parser created "+parser);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(parser.getArgumentDefinitions());
           createInputFileArguement(parser, arguments, "InputFile", InputFileString, InputFileByteArray);
           createArguement(parser, arguments, "TaxId", TaxId);
           createOptionalInputFileArguement(parser, arguments, "GoFile", GoFileString, GoFileByteArray);
           createArguement(parser, arguments, "DbRefAcc", DbRefAcc);
           createArguement(parser, arguments, "Accessions", Accessions);
           createArguement(parser, arguments, "AccessionsFile", AccessionsFile);
           createArguement(parser, arguments, "Tag Information", Tag_Information);
           createArguement(parser, arguments, "HideLargeScaleRef", HideLargeScaleRef);
           logger.info("created arguements");
           return runParser(graph, parser, arguments);
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status parser wgs
//Ignoring plugin without status parser wordnet
//Ignoring plugin without status parser yeastgenome
//Ignoring plugin without status parser yeasthomology
}