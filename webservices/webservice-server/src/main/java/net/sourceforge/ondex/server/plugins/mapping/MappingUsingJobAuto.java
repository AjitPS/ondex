/* Webservice wrapper of the Mappingplugins.
*
*/
//WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

package net.sourceforge.ondex.server.plugins.mapping;

import net.sourceforge.ondex.ONDEXPluginArguments;
import net.sourceforge.ondex.core.ONDEXGraph;
import net.sourceforge.ondex.wsapi.exceptions.*;
import net.sourceforge.ondex.wsapi.plugins.ZipFormat;
import org.apache.log4j.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import java.io.File;
import java.io.StringWriter;
import net.sourceforge.ondex.server.plugins.JobBase;
import net.sourceforge.ondex.wsapi.exceptions.WebserviceException;



/**
* AutoGenerated
* @author Christian Brenninkmeijer
*/
public class MappingUsingJobAuto extends JobBase{ 

    private static final Logger logger = Logger.getLogger(MappingUsingJobAuto.class);

    public MappingUsingJobAuto() throws CaughtException{
        super();
    }

//Ignoring discontinuted plugin mapping accessionbased
//Ignoring plugin without status mapping attributeEquality
//Ignoring plugin without status mapping basicaccessionbased
//Ignoring plugin without status mapping blastbased
//Ignoring plugin without status mapping crossspecies
//Ignoring experimental plugin mapping ec2go
//Ignoring plugin without status mapping external2go
//Ignoring plugin without status mapping go2goslim
//Ignoring plugin without status mapping graphpattern
//Ignoring plugin without status mapping inferGoTerm
     /**
     * Method to run Mapping in inparanoid package.
     *
 	 *    Status: STABLE Tested March 2010 (Artem Lysenko) Works for the tutorial example, fails in almost all other cases
 	 *    Authors: Jan Taubert, 
 	 *    Custodians: Jan Taubert, 
     * @param PathToBlast
 	 *            (REQUIRED! No Default!) Path to BLAST executable.
     * @param Evalue
 	 *            (Optional. Defaults to :0.0010) Evalue cutoff BLAST argument.
     * @param SeqAttribute
 	 *            (Optional. Defaults to :AA) Specifies the Attribute attribute containing the sequence data.
     * @param SeqType
 	 *            (Optional. Defaults to :AA) Specifies what sequence type is contained in the Attribute. [NA,AA]
     * @param cutoff
 	 *            (Optional. Defaults to :30) Bit-score cutoff (default 30).
     * @param overlap
 	 *            (Optional. Defaults to :0.5) Sequence overlap of match length compared to longest sequences (default 0.5).
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")

    @WebMethod(exclude = false)
    public String inparanoidMapping(
           @WebParam(name = "PathToBlast")java.lang.String PathToBlast,
           @WebParam(name = "Evalue")java.lang.Float Evalue,
           @WebParam(name = "SeqAttribute")java.lang.String SeqAttribute,
           @WebParam(name = "SeqType")java.lang.String SeqType,
           @WebParam(name = "cutoff")java.lang.Integer cutoff,
           @WebParam(name = "overlap")java.lang.Float overlap,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("mapping inparanoid called");
           net.sourceforge.ondex.mapping.inparanoid.Mapping mapping =
                   new net.sourceforge.ondex.mapping.inparanoid.Mapping();
           logger.info(");Mapping created "+mapping);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(mapping.getArgumentDefinitions());
           createArguement(mapping, arguments, "PathToBlast", PathToBlast);
           createArguement(mapping, arguments, "Evalue", Evalue);
           createArguement(mapping, arguments, "SeqAttribute", SeqAttribute);
           createArguement(mapping, arguments, "SeqType", SeqType);
           createArguement(mapping, arguments, "cutoff", cutoff);
           createArguement(mapping, arguments, "overlap", overlap);
           logger.info("created arguements");
           MappingJob job = new MappingJob(graph, mapping, arguments);
           return job.getJobId().toString();
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status mapping interolog
     /**
     * Method to run Mapping in lowmemoryaccessionbased package.
     *
 	 *    Authors: Jan Taubert, Matthew Hindle, 
 	 *    Status: STABLE Tested March 2010 (hindlem)
 	 *    Custodians: Jochen Weile, 
     * @param EquivalentConceptClass
 	 *            (Optional. No Default.) [List]This option should contain a pair of ConceptClasses seperated by a comma (,); for example "Thing,EC"
The usage of this setting is to allow the mapping method to cross the ConceptClass boundary in some special cases.
And thus be able to map for example similar GO and EC concepts to each other.
     * @param equivalentCV
 	 *            (Optional. No Default.) [List]This option should contain a pair of CVs seperated by a komma (,); for example "TIGR,TAIR"
The usage of this setting is to explicitly tell that two accessions with different CVs are infact containing the same information.
     * @param AttributeRestriction
 	 *            (Optional. No Default.) [List]This will limit the mapping method to only map concepts when the Attribute Value with the attribute name
specified by this parameter is the same.
     * @param IgnoreAmbiguity
 	 *            (Optional. Defaults to :false) When true it allows Ambiguous concept accessions to be mapped (use with care!).
     * @param RelationType
 	 *            (Optional. Defaults to :equ) The relation type to create between matching concepts: default relation type is the equals relation type.
     * @param WithinCVMapping
 	 *            (Optional. Defaults to :false) Map within CVs
     * @param ConceptClassRestriction
 	 *            (Optional. No Default.) [List]A Concept Class Restriction as an concept class that is used as the seed in the mapping
     * @param CVRestriction
 	 *            (Optional. No Default.) [List]Restriction on the mapping of CVs between two accessions
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")

    @WebMethod(exclude = false)
    public String lowmemoryaccessionbasedMapping(
           @WebParam(name = "EquivalentConceptClass")java.lang.String[] EquivalentConceptClass,
           @WebParam(name = "equivalentCV")java.lang.String[] equivalentCV,
           @WebParam(name = "AttributeRestriction")java.lang.String[] AttributeRestriction,
           @WebParam(name = "IgnoreAmbiguity")java.lang.Boolean IgnoreAmbiguity,
           @WebParam(name = "RelationType")java.lang.String RelationType,
           @WebParam(name = "WithinCVMapping")java.lang.Boolean WithinCVMapping,
           @WebParam(name = "ConceptClassRestriction")java.lang.String[] ConceptClassRestriction,
           @WebParam(name = "CVRestriction")java.lang.String[] CVRestriction,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("mapping lowmemoryaccessionbased called");
           net.sourceforge.ondex.mapping.lowmemoryaccessionbased.Mapping mapping =
                   new net.sourceforge.ondex.mapping.lowmemoryaccessionbased.Mapping();
           logger.info(");Mapping created "+mapping);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(mapping.getArgumentDefinitions());
           createArguement(mapping, arguments, "EquivalentConceptClass", EquivalentConceptClass);
           createArguement(mapping, arguments, "equivalentCV", equivalentCV);
           createArguement(mapping, arguments, "AttributeRestriction", AttributeRestriction);
           createArguement(mapping, arguments, "IgnoreAmbiguity", IgnoreAmbiguity);
           createArguement(mapping, arguments, "RelationType", RelationType);
           createArguement(mapping, arguments, "WithinCVMapping", WithinCVMapping);
           createArguement(mapping, arguments, "ConceptClassRestriction", ConceptClassRestriction);
           createArguement(mapping, arguments, "CVRestriction", CVRestriction);
           logger.info("created arguements");
           MappingJob job = new MappingJob(graph, mapping, arguments);
           return job.getJobId().toString();
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

     /**
     * Method to run Mapping in namebased package.
     *
 	 *    Authors: Jan Taubert, 
 	 *    Custodians: Jochen Weile, 
     * @param AttributeRestriction
 	 *            (Optional. No Default.) [List]This will limit the mapping method to only map concepts when the Attribute Value with the attribute name
specified by this parameter is the same.
     * @param EquivalentConceptClass
 	 *            (Optional. No Default.) [List]This option should contain a pair of ConceptClasses seperated by a comma (,); for example "Thing,EC"
The usage of this setting is to allow the mapping method to cross the ConceptClass boundary in some special cases.
And thus be able to map for example similar GO and EC concepts to each other.
     * @param ExactSynonyms
 	 *            (Optional. Defaults to :false) Force matching of only exact Synonyms (preferred concept names).
     * @param NameThreshold
 	 *            (Optional. Defaults to :2) Number of concept names that have to match.
     * @param ConceptClassRestriction
 	 *            (Optional. No Default.) [List]A Concept Class Restriction as an concept class that is used as the seed in the mapping
     * @param DataSourceRestriction
 	 *            (Optional. No Default.) [List]A DataSource Restriction as an ordered pair representing from and to Concepts in an evaluated Relation. (add the reverse compliment if direction is not important)
     * @param WithinCVMapping
 	 *            (Optional. Defaults to :false) Map within CVs
     * @param ExactNameMapping
 	 *            (Optional. Defaults to :false) Enforces when true that mappings between names should be case insensitive exact
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")

    @WebMethod(exclude = false)
    public String namebasedMapping(
           @WebParam(name = "AttributeRestriction")java.lang.String[] AttributeRestriction,
           @WebParam(name = "EquivalentConceptClass")java.lang.String[] EquivalentConceptClass,
           @WebParam(name = "ExactSynonyms")java.lang.Boolean ExactSynonyms,
           @WebParam(name = "NameThreshold")java.lang.Integer NameThreshold,
           @WebParam(name = "ConceptClassRestriction")java.lang.String[] ConceptClassRestriction,
           @WebParam(name = "DataSourceRestriction")java.lang.String[] DataSourceRestriction,
           @WebParam(name = "WithinCVMapping")java.lang.Boolean WithinCVMapping,
           @WebParam(name = "ExactNameMapping")java.lang.Boolean ExactNameMapping,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("mapping namebased called");
           net.sourceforge.ondex.mapping.namebased.Mapping mapping =
                   new net.sourceforge.ondex.mapping.namebased.Mapping();
           logger.info(");Mapping created "+mapping);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(mapping.getArgumentDefinitions());
           createArguement(mapping, arguments, "AttributeRestriction", AttributeRestriction);
           createArguement(mapping, arguments, "EquivalentConceptClass", EquivalentConceptClass);
           createArguement(mapping, arguments, "ExactSynonyms", ExactSynonyms);
           createArguement(mapping, arguments, "NameThreshold", NameThreshold);
           createArguement(mapping, arguments, "ConceptClassRestriction", ConceptClassRestriction);
           createArguement(mapping, arguments, "DataSourceRestriction", DataSourceRestriction);
           createArguement(mapping, arguments, "WithinCVMapping", WithinCVMapping);
           createArguement(mapping, arguments, "ExactNameMapping", ExactNameMapping);
           logger.info("created arguements");
           MappingJob job = new MappingJob(graph, mapping, arguments);
           return job.getJobId().toString();
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status mapping orthologprediction
//Ignoring plugin without status mapping paralogprediction
//Ignoring plugin without status mapping pfam2go
//Ignoring plugin without status mapping sequence2pfam
//Ignoring plugin without status mapping structalign
     /**
     * Method to run Mapping in tmbased package.
     *
 	 *    Status: STABLE Text mining to map concepts to publications. Assigns tf-idf scores and evidence text to relations. (Hassani-Pak et al, JIB 2010). Tested June 2011 (Keywan Hassani-Pak)
 	 *    Authors: Keywan Hassani-Pak, 
 	 *    Custodians: Keywan Hassani-pak, 
     * @param ConceptClass
 	 *            (REQUIRED! No Default!) [List]The conceptclass (terminology) that should be mapped to publications using text mining mapping methods
     * @param OnlyPreferredNames
 	 *            (Optional. Defaults to :false) Set true to consider only preferred names for text mining.
     * @param UseFullText
 	 *            (Optional. Defaults to :false) Set true to include the full text if it is available on a publication.
     * @param Search
 	 *            (Optional. Defaults to :exact) How do you like to search: Exact, And, Fuzzy or Proximity
     * @param Filter
 	 *            (Optional. No Default.) Which mappings should be filtered out: lowscore, maxspecificity, besthits
     * @param graphId
 	 *            (REQUIRED! No Default!) The ID of the Graph
     * @return The JobID. (Taverna users need a single XML Splitter
     * @throws WebserviceException
     */
    @WebResult(name = "jobId")

    @WebMethod(exclude = false)
    public String tmbasedMapping(
           @WebParam(name = "ConceptClass")java.lang.String[] ConceptClass,
           @WebParam(name = "OnlyPreferredNames")java.lang.Boolean OnlyPreferredNames,
           @WebParam(name = "UseFullText")java.lang.Boolean UseFullText,
           @WebParam(name = "Search")java.lang.String Search,
           @WebParam(name = "Filter")java.lang.String Filter,
           @WebParam(name = "graphId") Long graphId)
           throws WebserviceException {
        try{
           logger.info("mapping tmbased called");
           net.sourceforge.ondex.mapping.tmbased.Mapping mapping =
                   new net.sourceforge.ondex.mapping.tmbased.Mapping();
           logger.info(");Mapping created "+mapping);
           ONDEXGraph graph = webServiceEngine.getGraphToEdit(graphId);
           logger.info("found graph");
           ONDEXPluginArguments arguments = new ONDEXPluginArguments(mapping.getArgumentDefinitions());
           createArguement(mapping, arguments, "ConceptClass", ConceptClass);
           createArguement(mapping, arguments, "OnlyPreferredNames", OnlyPreferredNames);
           createArguement(mapping, arguments, "UseFullText", UseFullText);
           createArguement(mapping, arguments, "Search", Search);
           createArguement(mapping, arguments, "Filter", Filter);
           logger.info("created arguements");
           MappingJob job = new MappingJob(graph, mapping, arguments);
           return job.getJobId().toString();
        } catch (WebserviceException e)   {
            throw e;
        } catch (Exception e)    {
            throw new CaughtException (e, logger);
        }
    } //WARNING AUTOGENERATED DO NOT EDIT DIRECTLY AS EDITS WILL BE OVERWRITTED.

//Ignoring plugin without status mapping transitive
//Ignoring plugin without status mapping transitive_paper
//Ignoring plugin without status mapping transitivemembership
}